@model dynamic
@{
    UserModel me = @Model.Me;
    UserModel notMe = @Model.NotMe;
    ViewData["Title"] = $"Du chattar med {notMe.Firstname}";
}
<div id="page_chat">
    <div>
        @*HEADER CONTENT*@
        <div>
            <div style="max-width: 92px; display: flex; align-items: center; justify-content: center;">
                <img class="img img-fluid" src="@notMe.Images[0].Url" />
            </div>
            <span>Du chattar med @notMe.Firstname</span>
        </div>

        <ul id="message_list" class="list-group">

            @* Empty list item, dont remove! Used for duplicating *@
            <li class="list-group-item invisible" style="display:flex;">
                <div style="max-width: 92px; display: flex; align-items: center; justify-content: center;">
                    <img class="img img-fluid" src="@notMe.Images[0].Url" />
                </div>
                <div class="display-4 m-4 text"></div>
                <span class="timestamp"></span>
            </li>

            @*List loop of messages*@
            @{foreach (MessageModel message in @Model.Messages)
                {
                    if (message.Sender != me.ID)
                    {
                        <li class="list-group-item" style="display:flex;">
                            <div style="max-width: 92px; display: flex; align-items: center; justify-content: center;">
                                <img class="img img-fluid" src="@notMe.Images[0].Url" />
                            </div>
                            <div class="display-4" m-4>@message.Text</div>
                            <span>@message.Timestamp</span>
                        </li>
                    }
                    else
                    {
                        <li class="list-group-item" style="display:flex;">
                            <div style="max-width: 92px; display: flex; align-items: center; justify-content: center;">
                                <img class="img img-fluid" src="@me.Images[0].Url" />
                            </div>
                            <div class="display-4" m-4>@message.Text</div>
                            <span>@message.Timestamp</span>
                        </li>
                    }

                }
            }
        </ul>

        <div>
            <div>
                <textarea id="message_content"></textarea>
            </div>
            <div>
                <button name="send-message">Send</button>
            </div>
        </div>
    </div>
</div>
<script>

    const createNewChatRow = (text, timestamp = null) => {
        var c = document.querySelector('.list-group-item.invisible').cloneNode(true) || null
        c.querySelector('.text').textContent = text || ''
        //c.querySelector('.img').href = c.querySelector('.img').href
        c.classList.remove('invisible')
        c.querySelector('.timestamp').textContent = moment(timestamp).format('DD MM YYYY hh:mm:ss')
        document.querySelector('#message_list').append(c)
    }


    document.querySelector('button[name="send-message"]').addEventListener('click', (ev) => {
        ev.preventDefault()

        var contentToSend = document.querySelector('#message_content').value;

        if (contentToSend === null || contentToSend == "")
            return


        console.log({ contentToSend: contentToSend })
        // To be matched against backend model
        var messageDataBody = {
            Message: contentToSend
        }

        // Send message
        fetch(`/api/user/@me.ID/message/@notMe.ID`, {
            method: 'PUT',
            body: JSON.stringify(messageDataBody),
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
        })
            .then(res => res.json())
            .then(json => {
                // Update chat dynamically with having to refresh window
                console.log(json)
                var { Message, Timestamp} = json
                createNewChatRow(Message, Timestamp)
            })
            .catch(err => console.error(err))
    })
</script>