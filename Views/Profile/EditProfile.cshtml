@model UserModel
@{
    ViewData["Title"] = "Redigera Profil";
}

<article id="page_profile" class="card-body mx-auto" style="max-width: 400px">
    <p class="h4 m-md-4 text-center">Dina profiluppgifter</p>
    <div class="invisible" id="id">@Model.ID</div>
    <form>
        <div class="form-group input-group">
            <div class="input-group-prepend">
                <span class="input-group-text"> <i class="fas fa-signature" style=" color: #eb6864"></i> </span>
            </div>
            <input type="text" value="@Model.Firstname" name="firstname" class="form-control" placeholder="Förnamn">
            <input type="text" value="@Model.Surname" name="surname" class="form-control ml-1" placeholder="Efternamn">
            <div class="invalid-feedback">Ange ett förnamn och efternamn.</div>
        </div>
        <div class="form-group input-group">
            <div class="input-group-prepend">
                <span class="input-group-text"> <i class="fas fa-map-marker-alt" style=" color: #eb6864"></i> </span>
            </div>
            <!--25 landskap nedanför-->
            <select class="form-control" name="location2">
                <option selected>@Model.Location</option>
                <option value="Blekinge">Blekinge</option>
                <option value="Bohuslän">Bohuslän</option>
                <option value="Dalarna">Dalarna</option>
                <option value="Dalsland">Dalsland</option>
                <option value="Gotland">Gotland</option>
                <option value="Gästrikland">Gästrikland</option>
                <option value="Halland">Halland</option>
                <option value="Hälsingland">Hälsingland</option>
                <option value="Härjedalen">Härjedalen</option>
                <option value="Jämtland">Jämtland</option>
                <option value="Lappland">Lappland</option>
                <option value="Medelpad">Medelpad</option>
                <option value="Norrbotten">Norrbotten</option>
                <option value="Närke">Närke</option>
                <option value="Skåne">Skåne</option>
                <option value="Småland">Småland</option>
                <option value="Södermanland">Södermanland</option>
                <option value="Uppland">Uppland</option>
                <option value="Värmland">Värmland</option>
                <option value="Västerbotten">Västerbotten</option>
                <option value="Västergötland">Västergötland</option>
                <option value="Västmanland">Västmanland</option>
                <option value="Ångermanland">Ångermanland</option>
                <option value="Öland">Öland</option>
                <option value="Östergötland">Östergötland</option>
            </select>
            <div class="invalid-feedback">Välj ett landskap.</div>
        </div>

        <div class="form-group input-group">
            <div>
                <h4>Intressen</h4>
                <input id="new_interest_input" autocomplete="off" type="text" placeholder="...">
                <button id="add_interest" class="btn btn-primary">Lägg till</button>
                <div class="dropdown-menu">

                </div>

            </div>
        </div>

        <div class="form-group input-group">

            <div id="interest_list" class="">
                @*new elements go here*@
                @{
                    foreach (InterestModel item in Model.Interests)
                    {
                        <span data-id="@item.ID" class="">
                            <span class="badge badge-primary">@item.Value</span>
                            <span class="far fa-trash-alt mr-2 trashcan kill-me" 
                                  style=" cursor: pointer; opacity: 0.8; "></span>
                        </span>
                    }
                }
            </div>
        </div>

        <div class="form-group input-group">
            <div>
                <div class="">
                    <img class="img img-fluid" data-target="active" src="" />
                </div>
                @*<input type="file" name="image" accept=".png,.jpg,.jpeg,.gif,.tif,.tiff,.bmp">*@
            </div>
        </div>

        <div class="form-group input-group">
            <ul class="list-inline">
                @{
                    foreach (ImageModel image in @Model.Images)
                    {
                        <li class="list-inline-item" style="max-width: 50px;">
                            <img data-action="scale" data-id="@image.ID" data-uid="@image.UserID" class="img img-fluid" src="@image.Url" alt="bild saknas" />
                            <div class="btn btn-danger" data-id="@image.ID" data-uid="@image.UserID">X</div>
                            @*<span class="input-group-text"> <i class="fas fa-times fa-3x" style="color:#eb6864"></i></span>*@
                        </li>
                    }
                }

                <li class="list-inline-item is-48x48" style="max-width: 50px;">
                    <img data-action="scale" class="img img-fluid" src="/images/placeholder160.png" alt="..." />
                    <input id="add_image" type="file" name="image" accept=".png,.jpg,.jpeg,.gif,.tif,.tiff,.bmp" placeholder="Ny bild">
                </li>

            </ul>
        </div>
        <div class="form-group">
            <button type="submit" name="editbtn" class="btn btn-primary btn-block" disabled>Ändra uppgifter</button>
        </div>
        <div class="form-group">
            <button class="btn btn-primary btn-block" data-toggle="collapse" href="#changePassword" role="button">Ändra lösenord</button>
        </div>

    </form>
    <div class="collapse" id="changePassword">
        <form>
            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"> <i class="fas fa-lock" style="color:#eb6864"></i></span>
                </div>
                <input type="password" name="currentpassword" class="form-control" placeholder="Ange ditt gamla Lösenord">
                <div class=" invalid-feedback">Lösenordet stämde inte överens</div>
            </div>
            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"> <i class="fas fa-lock" style=" color: #eb6864"></i> </span>
                </div>
                <input type="password" name="password" class="form-control" placeholder="Lösenord">
                <div class="invalid-feedback">Lösenordet måste bestå av minst 6 tecken</div>
            </div>
            <div class="form-group input-group">
                <div class="input-group-prepend">
                    <span class="input-group-text"> <i class="fas fa-lock" style=" color: #eb6864"></i> </span>
                </div>
                <input type="password" name="confirm-password" class="form-control" placeholder="Bekräfta Lösenord">
                <div class="invalid-feedback">Lösenordet måste bestå av minst 6 tecken och stämma överens med tidigare fält</div>
            </div>
            <button name="btnChangePassword" class="btn btn-primary btn-block" type="submit" disabled>Ändra Lösenord</button>
        </form>
    </div>
    <div class="mt-4">
        <button name="backbtn" class="btn btn-primary btn-block">Tillbaka</button>
    </div>
</article>

<script>


    // Get user id from html
    const parseToInt = (str) => parseInt(str) || NaN
    const getUserId = () => parseToInt(document.querySelector('#id').textContent)

    var btnChangePassword = document.querySelector('button[name="btnChangePassword"]')
    var editbtn = document.querySelector('button[name="editbtn"]')
    var location2 = document.querySelector('select[name="location2"]')
    var firstname = document.querySelector('input[name="firstname"]')
    var surname = document.querySelector('input[name="surname"]')
    var currentPassword = document.querySelector('input[name="currentpassword"]')
    var password = document.querySelector('input[name="password"]')
    var confirmPassword = document.querySelector('input[name="confirm-password"]')
    var backbtn = document.querySelector('button[name="backbtn"]')
    var dropDownMenu = document.querySelector('.dropdown-menu')


    firstname.addEventListener('input', (ev) => {
        if (ev.target.value.length < 2) {
            ev.target.classList.add("is-invalid")
            editbtn.setAttribute("disabled", "")
        }
        else {
            ev.target.classList.remove("is-invalid")
            ev.target.classList.add("is-valid")
            editbtn.removeAttribute("disabled")
        }

    })
    surname.addEventListener('input', (ev) => {
        if (ev.target.value.length < 2) {
            ev.target.classList.add("is-invalid")
            editbtn.setAttribute("disabled", "")
        }
        else {
            ev.target.classList.remove("is-invalid")
            ev.target.classList.add("is-valid")
            editbtn.removeAttribute("disabled")
        }

    })

    location2.addEventListener('input', (ev) => {
        editbtn.removeAttribute("disabled")
    })



    currentPassword.addEventListener('input', (ev) => {
        if (ev.target.value.length < 6) {
            ev.target.classList.add("is-invalid")
        }
        else {
            ev.target.classList.remove("is-invalid")
            ev.target.classList.add("is-valid")
        }
        validatePasswords()
    })



    password.addEventListener('input', (ev) => {
        if (ev.target.value.length < 6) {
            ev.target.classList.add("is-invalid")
        }
        else {
            ev.target.classList.remove("is-invalid")
            ev.target.classList.add("is-valid")
        }
        validatePasswords()
    })

    confirmPassword.addEventListener('input', (ev) => {
        if (ev.target.value.length < 6 || ev.target.length > 20) {
            ev.target.classList.add("is-invalid")
        }
        else {
            ev.target.classList.remove("is-invalid")
            ev.target.classList.add("is-valid")
        }
        validatePasswords()
    })

    function validatePasswords() {
        var passwordElements = [...document.querySelectorAll('input[name="confirm-password"], input[name="password"], input[name="currentpassword"]')];

        if (passwordElements.filter(el => el.classList.contains('is-invalid')).length == 0)
            btnChangePassword.removeAttribute('disabled')
        else
            btnChangePassword.setAttribute('disabled', "")

    }



    editbtn.addEventListener('click', (ev) => {
        ev.preventDefault()

        var data = {
            Firstname: firstname.value,
            Surname: surname.value,
            Location: location2.value,
            Password: password.value,
            ID: document.querySelector("#id").textContent.replace(' ', ''),
            CurrentPassword: currentPassword.value
        }

        console.log(data)

        fetch(`/api/profile/${data.ID}`, {
            method: 'PUT',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(response => response.json())
            .then(json => {
                Successbox.element.classList.add('bg-success')
                Successbox.setColor('white')
                Successbox.show(json.Message)
            })
            .catch(err => console.error(err))
    })

    btnChangePassword.addEventListener('click', (ev) => {
        ev.preventDefault()


        if (password.value !== confirmPassword.value) {
            Successbox.element.classList.add('bg-danger')
            Successbox.setColor('white')
            Successbox.show("nya lösenord stämmer inte överens")
            return;
        }
        var data = {
            Firstname: firstname.value,
            Surname: surname.value,
            Password: password.value,
            Location: location2.value,
            ID: document.querySelector("#id").textContent.replace(' ', ''),
            CurrentPassword: currentPassword.value
        }

        fetch(`/api/profile/${data.ID}`, {
            method: 'PUT',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        })
            .then(res => res.json())
            .then(data => {
                if (data.Status === "Fail") {
                    console.log("wrong")
                    Successbox.element.classList.add('bg-danger')
                    Successbox.setColor('white')
                    Successbox.show(data.Message, "Felaktig inmatning")
                }
                else {
                    console.log("It worked")
                    Successbox.element.classList.remove('bg-danger')
                    Successbox.element.classList.add('bg-success')
                    Successbox.setColor('white')
                    Successbox.show(data.Message)
                }
            })
            .catch(err => console.error(err))
    })

    backbtn.addEventListener('click', (ev) => {
        ev.preventDefault()
        window.location.href = "/profile"
        return;
    })

    // Editing image stuff
    const deleteFile = (imageId = -1) => {
        fetch(`/api/file/${imageId}`, {
            method: "DELETE"
        })
            .then(res => res.json())
            .then(json => Successbox.show(json.Message))
            .catch(err => Successbox.show(err.Message))
    }


    const refreshImageListeners = function () {
        // Img click
        var userImages = [...document.querySelectorAll('img[data-id]')];
        // Delete buttons
        var deleteButtons = [...document.querySelectorAll('div.btn[data-id], div.btn[data-uid]')]
        // Large picture
        var activeImage = document.querySelector('img[data-target="active"]')
        userImages
            .map(el => el.addEventListener('click', (ev) => {

                // Clear active statuses on all imgs
                userImages.map(x => x.classList.remove('active'))

                // Set current to active
                if (!el.classList.contains('active'))
                    el.classList.add('active')

                activeImage.src = el.src;

            }))

        // Set Delete button
        deleteButtons
            .map(el => {
                el.addEventListener('click', (ev) => {

                    var imageId = parseToInt(el.getAttribute('data-id'))

                    console.log('clicked', imageId)

                    if (Number.isNaN(imageId)) {
                        Successbox.show('Kunde ej radera bild', 'Error_1')
                        return;
                    }

                    var t = userImages
                        .filter(imgEl => imgEl.getAttribute('data-id') === el.getAttribute('data-id')).shift()

                    if (typeof t === 'undefined' || t === null) {
                        Successbox.show('Kunde ej radera bild', 'Error_2')
                        return;
                    }


                    activeImage.src = ""
                    // Make api call to delete

                    // Remove graphics

                    var grandParent = t.parentElement.parentElement
                    var parent = t.parentElement
                    grandParent.removeChild(parent)
                    console.log('Deleting image with ID =>', imageId)
                    deleteFile(imageId)
                })
            })
    }

    refreshImageListeners()

    // Add image functionality
    const editProfileAddImageInput = document.querySelector('#add_image')

    const uploadNewFile = (file) => {
        const currentUserId = getUserId()

        // Validate number
        if (Number.isNaN(currentUserId)) {
            Successbox.show('Invalid user id')
            return;
        }

        // Create form with images
        var formData = new FormData()
        formData.append('file', file)

        fetch(`/api/file/${currentUserId}`, {
            method: "POST",
            body: formData,
            headers: {
                "Accept": '/'
            }
        })
            .then(res => res.json())
            .then(json => {
                Successbox.show(json.Message)
                location.reload()
            })
            .catch(err => Successbox.show(err.Message))
    }

    const handleNewFile = async (ev) => {
        try {
            var newFiles = [...ev.target.files];
            newFiles.map((f, iterator) => uploadNewFile(f, iterator))
        }
        catch (e) {
            console.error(e)
        }
    }

    editProfileAddImageInput.value = ''
    editProfileAddImageInput
        .addEventListener('change', (ev) => handleNewFile(ev))

    // Interest listeners
    var addInterestButton = document.querySelector('#add_interest')
    var interestList = document.querySelector('#interest_list')
    var interestInput = document.querySelector('#new_interest_input') || null

    // Reset value
    interestInput.value = ''

    var uploadInterest = (interest, callback = console.log, errorCallback = console.error) => {

        const currentUserId = getUserId()

        // Validate number
        if (Number.isNaN(currentUserId)) {
            Successbox.show('Invalid user id')
            return;
        }

        fetch(`/api/profile/${currentUserId}/interest/${interest}`, {
            method: "PUT",
            headers: {
                "Accept": '/',
            }
        })
            .then(res => res.json())
            .then(json => {
                callback(interest)
                Successbox.show(json.Message)
            })
            .catch(err => {
                errorCallback(interest)
                Successbox.show(err.Message)
            })

    }

    const queryUserInterests = (query, callback = console.log, limit = 5) => {
        fetch(`/api/interest/${query}?limit=${limit}`, {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            method: "GET"
        })
            .then(res => res.json())
            .then(json => callback(json))
            .catch(err => console.error(err))
    }

    const deleteInterest = (query, callback = console.log) => {
        fetch(`/api/interest/${getUserId()}/${query}`, {
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            method: "DELETE"
        })
            .then(res => res.json())
            .then(json => callback(json))
            .catch(err => console.error(err))
    }

    const addDropDownChild = (str) => {
        var a = document.createElement('a')
        a.classList.add('dropdown-item')
        a.textContent = str
        a.addEventListener('click', (ev) => {
            ev.preventDefault()
            interestInput.value = str
            killAllChildren(dropDownMenu)
        })
        dropDownMenu.append(a)
    }

    interestInput.addEventListener('input', (ev) => {
        ev.preventDefault()
        console.log(interestInput.value)
        if (interestInput.value.length < 1 || interestInput.value === "" || interestInput.value === null) {
            dropDownMenu.classList.remove('show')
            return;
        }
            

        queryUserInterests(interestInput.value, (arr) => {
            killAllChildren(dropDownMenu)

            if (arr.length > 0)
                dropDownMenu.classList.add('show')
            else
                dropDownMenu.classList.remove('show')

            arr.map((item, index) => {
                addDropDownChild(item.value)
            })
        })
    })

    const interestKillFunc = (el) => {
        el.addEventListener('click', (ev) => {
            ev.preventDefault()
            // Grab name of interest
            var text = el.parentElement.querySelector('.badge').textContent 
            // Kill myself
            el.parentElement.parentElement.removeChild(el.parentElement)
            // Send kil request
            deleteInterest(text)

        })
    }
        // Add to existing elements
        ;[...document.querySelectorAll('#interest_list > span > span.kill-me')]
            .map(el => interestKillFunc(el))

    var addNewInterest = (str) => {
        var parent = document.createElement('div')
        var badge = document.createElement('span')
        var x = document.createElement('div')

        badge.classList.add('badge', 'badge-primary')
        badge.textContent = str
        parent.classList.add('d-flex')
        x.classList.add("far", "fa-trash-alt", "trashcan")
        interestKillFunc(x)
        parent.append(badge)
        parent.append(x)
        interestList.append(parent)
    }

    addInterestButton.addEventListener('click', (ev) => {
        ev.preventDefault()
        var { value } = interestInput

        if (value === null || value === '')
            return
        value = value.replace(/[^a-zA-ZåäöÅÄÖ0-9 -]+/, '')

        uploadInterest(value, addNewInterest, console.error)
        interestInput.value = ''
        value = ''
        dropDownMenu.classList.remove('show')
    })


</script>

