@model (UserModel, List<UserMatchDto>, List<UserMatchDto>, List<UserMatchDto>)
@{
    int userID = Model.Item1.ID;
    List<UserMatchDto> recieved = new List<UserMatchDto>(@Model.Item2);
    List<UserMatchDto> requested = new List<UserMatchDto>(@Model.Item3);
    List<UserMatchDto> matched = new List<UserMatchDto>(@Model.Item4);
    ViewData["Title"] = "Sinners";
}

@functions{
    /// <summary>
    /// Convert <see cref="Relationship"/> enum so it can be used as a string in href
    /// </summary>
    public int RelationshipToInt(Relationship r) => (int)r;


}
<div id="page_sinners" class="profile-font-style">
    
        <p class="bg-primary text-white text-center mt-3">Mottagna förfrågningar</p>
        @foreach (var r in recieved)
        {
            <div class="card-body profile-border-color">
                @{
                    if (r.Images.Count > 0)
                    {
                        <img class="img img-fluid rounded is-48x48" src="@r.Images[0].Url" />
                    }
                }
                <a class="profile-font-style text-dark" href="/profile/user/@r.ID">@r.Firstname @r.Surname</a>
                <button href="/api/user/@userID/accept/@r.ID/@RelationshipToInt(@r.Status1)" name="acceptbtn" class="btn btn-success fa-pull-right mr-4"> Accept</button>
                <button onclick="decline_request(@r.ID)" name="denybtn" class="btn bg-primary text-white mr-4 fa-pull-right">Deny</button>
            </div>
        }
    

    <p class="bg-primary text-white text-center mt-3">Skickade</p>
    @foreach (var r in requested)
    {
        <div class="card-body profile-border-color">
            @{
                if (r.Images.Count > 0)
                {
                    <img class="img img-fluid rounded is-48x48" src="@r.Images[0].Url" />
                }
            }
            <a class="profile-font-style text-dark" href="/profile/user/@r.ID">@r.Firstname @r.Surname</a>
        </div>
    }
<p class="bg-primary text-white text-center mt-3">🍆 Dina Matchningar 🍆 </p>
    @foreach (var m in matched)
    {
        <div class="card-body profile-border-color">
            @{
                if (m.Images.Count > 0)
                {
                    <img class="img img-fluid rounded is-48x48" src="@m.Images[0].Url" />
                }
            }
            <a class="profile-font-style text-dark" href="/profile/user/@m.ID">@m.Firstname @m.Surname</a>
            <button class="btn btn-success fa-pull-right mr-4" href="/message/@m.ID/@userID" name="message-page">Skicka meddelande</button>
        </div>
    }



</div>
<script>
    // Accept request
    ;[...document.querySelectorAll('button[name="acceptbtn"]')]
        .map(el => el.addEventListener('click', (ev) => {
            ev.preventDefault()
            fetch(ev.target.getAttribute('href'), {
                method: "GET",
                headers: {
                    "Accept": '/'
                }
            })
                .then(res => res.json())
                .then(json => {
                    Successbox.element.classList.add('bg-success')
                    Successbox.setColor('white')
                    Successbox.show(json.Message)
                    window.setTimeout(function () {
                    location.reload()
                    },2000)
                    
                })
                .catch(err => Successbox.show(err.Message))
        }))
        // todo; deny request
    
    function decline_request(id) {
        var data = {
            ID: id
        }

        fetch(`/api/home/${data.ID}`, {
            method: 'PUT',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify("Decline")
        })
            .then(res => res.json())
            .then(data => {
                if (data.Status === "Fail") {
                    Successbox.element.classList.add('bg-danger')
                    Successbox.setColor('white')
                    Successbox.show(data.Message, "Fel")

                    window.setTimeout(() => {
                        
                        location.reload();
                    }, 2000)
                }
                else {
                    Successbox.element.classList.remove('bg-danger')
                    Successbox.element.classList.add('bg-success')
                    Successbox.setColor('white')
                    Successbox.show(data.Message)
                    window.setTimeout(() => {
                        location.reload();
                    }, 2000)
                }
            })
            .catch(err => console.error(err))
    }
        //;[...document.querySelectorAll('button[name="denybtn"]')]
        //    .map(el => el.addEventListener('click', (ev) => {
        //        ev.preventDefault();
        //        }     
        //    }))
    
        ;[...document.querySelectorAll('button[name="message-page"]')]
            .map(el => el.addEventListener('click', (ev) => {
                ev.preventDefault()
                window.location.replace(ev.target.getAttribute('href'))
            }))
</script>


